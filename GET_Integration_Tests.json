// Load Postman BDD && Global DataTown functions
eval(postman.getGlobalVariable('postmanBDD'));
eval(postman.getGlobalVariable('DataTownFunctions'));
// Parse Response Body
const testData = JSON.parse(responseBody);

describe('Integrations - GET Integration', function(){
 it('should return a 200 OK status code', function(){
   response.should.have.status(200);
 }); 
 it('should return json and not be empty', function(){
   response.should.be.json;
   response.body.should.not.be.empty;
 });
 it('should return a data object with all integrations', function(){
     expect(testData).to.have.property('data').that.is.an('object');
 });
//The response is an object that has objects
 it('should return valid integration objects in the object', function(){
      expect(testData.data).to.have.all.keys(
      'id','created_at','updated_at','status','pull_when_visitors_create_account',
      'pull_when_customer_records_updated','pull_when_customers_make_order','mailing_list_id',
      'push_purchase_behavior_targeting','push_previously_purchased_products','previously_purchased_products_to_push',
      'push_related_product_data','related_products_to_push','push_order_and_shipping_data',
      'push_store_info_customer_group_coupon_data','import_customers_and_orders','import_products_and_categories',
      'pull_data_from','pull_data_to','source_account','target_account','integration_type','pull_when_order_statuses',
      'selectable_fields','mappable_fields'
      );
      expect(testData.data).to.have.property('id').that.is.a('number');
      expect(testData.data).to.have.property('created_at').that.is.an('object');
      testDateObject(testData.data.created_at);
      expect(testData.data).to.have.property('updated_at').that.is.an('object');
      testDateObject(testData.data.updated_at);
      expect(testData.data).to.have.property('pull_when_visitors_create_account').that.is.an('number');
      expect(testData.data).to.have.property('pull_when_customer_records_updated').that.is.a('number');
      expect(testData.data).to.have.property('pull_when_customers_make_order').that.is.a('number');
      expect(testData.data).to.have.property('mailing_list_id').that.is.a('string');
      expect(testData.data).to.have.property('push_purchase_behavior_targeting').that.is.a('number');
      expect(testData.data).to.have.property('push_previously_purchased_products').that.is.a('number');
      expect(testData.data).to.have.property('previously_purchased_products_to_push').that.is.a('number');
      expect(testData.data).to.have.property('related_products_to_push').that.is.a('number');
      expect(testData.data).to.have.property('push_order_and_shipping_data').that.is.a('number');
      expect(testData.data).to.have.property('push_store_info_customer_group_coupon_data').that.is.a('number');
      expect(testData.data).to.have.property('import_customers_and_orders').that.is.a('number');
      expect(testData.data).to.have.property('import_products_and_categories').that.is.a('number');
      expect(testData.data).to.have.property('pull_data_from').that.is.a('null');
      expect(testData.data).to.have.property('pull_data_to').that.is.a('null');
      });
});