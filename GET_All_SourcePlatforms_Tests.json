// Load Postman BDD && Global DataTown functions
eval(postman.getGlobalVariable('postmanBDD'));
eval(postman.getGlobalVariable('DataTownFunctions'));

// Parse Response Body
const sourcePlatformData = JSON.parse(responseBody);

describe('SourcePlatforms - GET All Source Platforms', function(){
    it('should return a 200 OK status code', function(){
        response.should.have.status(200);
    });
    it('should return json and not be empty', function(){
        response.should.be.json;
        response.body.should.not.be.empty;
    });
    it('should return a data array with all source platforms', function(){
        expect(sourcePlatformData).to.have.property('data').that.is.an('array');
    });
    it('should return valid source platform objects in the array', function(){
        sourcePlatformData.data.forEach(function(sourcePlatform){
            expect(sourcePlatform).to.have.all.keys(['id','name','logo', 'options']);
            expect(sourcePlatform).to.have.property('id').that.is.a('number');
            expect(sourcePlatform).to.have.property('name').that.is.a('string');
            expect(sourcePlatform).to.have.property('logo').that.is.a('string');
            expect(sourcePlatform).to.have.property('options').that.is.an('array');
            sourcePlatform.options.forEach(function(option){
                expect(option).to.have.all.keys(['key', 'label']);
                expect(option).to.have.property('key').that.is.an('string');
                expect(option).to.have.property('label').that.is.an('string');
            });
        });
    });
});